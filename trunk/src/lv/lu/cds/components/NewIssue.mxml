<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx" width="550" height="600"
	title="{ (!viewMode) ? 'Izveidot problēmziņojumu' : 'Problēmziņojuma apskate' }">
	
	<fx:Script>
		<![CDATA[
			import lv.lu.cds.buisnessobjects.Issue;
			import lv.lu.cds.buisnessobjects.constants.IssueConstants;
			import lv.lu.cds.model.DomainModel;
			
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			import mx.validators.Validator;
			
			
			[Bindable]
			public var viewMode : Boolean = false;
			
			override protected function closeButton_clickHandler(event:MouseEvent):void
			{
				PopUpManager.removePopUp( this );
			}
			
			protected function createButton_clickHandler(event:MouseEvent):void
			{
				createAndSaveButton_clickHandler(null);
				if ( isValid() )
				{
					closeButton_clickHandler( null );
				}
			}
			
			
			protected function createAndSaveButton_clickHandler(event:MouseEvent):void
			{
				if ( isValid() )
				{
					var data : Issue = new Issue;
					data.id = DomainModel.getInstance().lastId;
					data.author = author.text;
					data.status = sstatus.text;
					data.created = created.selectedDate;
					data.title = ttitle.text;
					data.description = description.text;
					data.functionality = functionality.text;
					data.notes = notes.text;
					data.priority = priority.selectedItem as String;
					data.responder = responder.text;
					data.risk = risk.selectedItem as String;
					data.system = system.text;
					DomainModel.getInstance().addIssue( data );
				}
			}
			
			public function populateData( data : Issue ) : void
			{
				if (viewMode && data != null )
				{
					iid.text = data.id.toString();
					author.text = data.author;
					sstatus.text = data.status;
					created.selectedDate = data.created;
					ttitle.text = data.title;
					description.text = data.description;
					functionality.text = data.functionality;
					notes.text = data.notes;
					priority.selectedItem = data.priority;
					responder.text = data.responder;
					risk.selectedItem = data.risk;
					system.text = data.system;
				}
			}
			
			private function isValid() : Boolean
			{
				var result : Array = Validator.validateAll( [
					ttitileValidator,
					descriptionValidator,
					systemValidator,
					functionalityValidator,
					responderValidator
				] );
				return result.length == 0;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<mx:StringValidator
			id="ttitileValidator"
			source="{ ttitle }"
			property="text"
			requiredFieldError="Nosaukums nav ievadīts"
			/>
		<mx:StringValidator
			id="descriptionValidator"
			source="{ description }"
			property="text"
			requiredFieldError="Detalizēts apraksts nav ievadīts"
			/>
		<mx:StringValidator
			id="systemValidator"
			source="{ system }"
			property="text"
			requiredFieldError="Sistēma nav ievadīta"
			/>
		<mx:StringValidator
			id="functionalityValidator"
			source="{ functionality }"
			property="text"
			requiredFieldError="Funkcionalitāte nav ievadīta"
			/>
		<mx:StringValidator
			id="responderValidator"
			source="{ responder }"
			property="text"
			requiredFieldError="Atbildīgais nav ievadīts"
			/>
	</fx:Declarations>
	
	<s:Scroller>
		<s:VGroup
			width="100%"
			height="100%">
			<s:HGroup>
				<mx:Form>
					<mx:FormItem 
						label="Identifikators" >
						<mx:TextInput 
							id="iid" 
							enabled="false" 
							text="{ !viewMode ? DomainModel.getInstance().lastId : '' }" />
					</mx:FormItem>
					<mx:FormItem 
						label="Statuss">
						<mx:TextInput 
							id="sstatus" 
							enabled="false" 
							text="{ IssueConstants.STATUS_1 }" />
					</mx:FormItem>
					<mx:FormItem 
						label="Autors">
						<mx:TextInput 
							id="author" 
							enabled="false" 
							text="{ DomainModel.getInstance().user.username }" />
					</mx:FormItem>
					<mx:FormItem 
						label="Izveides laiks/datums">
						<mx:DateField
							id="created"
							selectedDate="{new Date}"
							enabled="{ !viewMode }"
							/>
					</mx:FormItem>
					<mx:FormItem label="Nosaukums*">
						<mx:TextInput 
							id="ttitle"
							enabled="{ !viewMode }"
							/>
					</mx:FormItem>
					<mx:FormItem label="Detalizēts apraksts*">
						<s:TextArea 
							id="description"
							width="300"
							heightInLines="6"
							enabled="{ !viewMode }"
							/>
					</mx:FormItem>
					<mx:FormItem label="Prioritāte*">
						<s:DropDownList
							id="priority"
							dataProvider="{ new ArrayCollection([ IssueConstants.PRIORITY_HIGH, IssueConstants.PRIORITY_MEDIUM, IssueConstants.PRIORITY_LOW ]) }"
							selectedIndex="0"
							enabled="{ !viewMode }"
							/>
					</mx:FormItem>
					<mx:FormItem label="Sistēma*">
						<mx:TextInput 
							id="system"
							enabled="{ !viewMode }"
							/>
					</mx:FormItem>
					<mx:FormItem label="Funkcionalitāte*">
						<mx:TextInput 
							id="functionality"
							enabled="{ !viewMode }"
							/>
					</mx:FormItem>
					<mx:FormItem label="Risks*">
						<s:DropDownList
							id="risk"
							dataProvider="{ new ArrayCollection([ IssueConstants.RISK_HIGH, IssueConstants.RISK_MEDIUM, IssueConstants.RISK_LOW ]) }"
							selectedIndex="0"
							enabled="{ !viewMode }"
							/>
					</mx:FormItem>
					<mx:FormItem label="Atbildīgais*">
						<mx:TextInput 
							id="responder"
							enabled="{ !viewMode }"
							/>
					</mx:FormItem>
					<mx:FormItem label="Pieraksti">
						<s:TextArea 
							id="notes"
							width="300"
							heightInLines="6"
							enabled="{ !viewMode }"
							/>
					</mx:FormItem>
				</mx:Form>
				
			</s:HGroup>
			
			<s:HGroup
				width="100%"
				horizontalAlign="center"
				verticalAlign="middle">
				<s:Button 
					id="createButton" 
					width="100" 
					label="Izveidot" 
					click="createButton_clickHandler(event)"
					visible="{ !viewMode }"
					includeInLayout="{ !viewMode }"
					/>
				<s:Button 
					id="createAndSaveButton" 
					width="150" 
					label="Izveidot un atstāt" 
					click="createAndSaveButton_clickHandler(event)"
					visible="{ !viewMode }"
					includeInLayout="{ !viewMode }"
					/>
				<s:Button 
					id="closeButton" 
					width="100" 
					label="Atcelt" 
					click="closeButton_clickHandler(event)"
					/>
			</s:HGroup>	
		</s:VGroup>		
	</s:Scroller>
	
</s:TitleWindow>
